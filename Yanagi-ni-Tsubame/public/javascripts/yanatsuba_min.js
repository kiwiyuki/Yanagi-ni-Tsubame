var Background = function() { var bg = new THREE.Object3D(); var hugeBoxNum = 12; var d = 0.95; var counter = 0; var HugeBox = function() { var g = new THREE.BoxGeometry(150, 150, 800); var m = new THREE.MeshLambertMaterial({color : 0x222222}); var box = new THREE.Mesh(g, m); return box;}; for (var j = 0; j < hugeBoxNum; j++) { for (var i = 0; i < hugeBoxNum; i++) { var hugeBox = new HugeBox(); hugeBox.position.set((i - hugeBoxNum / 2) * 200, (j - hugeBoxNum / 2) * 200, -900); hugeBox.flag = Math.random() < 0.5; bg.add(hugeBox);}
}
return { mesh : bg, update : function() { bg.children.forEach(function(hugeBox) { if(hugeBox.flag) { hugeBox.position.z = hugeBox.position.z * d - 900 * (1 - d);} else { hugeBox.position.z = hugeBox.position.z * d - 1100 * (1 - d);}
}); counter++; if(counter > 180) { bg.children.forEach(function(hugeBox) { hugeBox.flag = Math.random() < 0.5;}); counter = 0;}
}
};}
var Player = function(scene, camera, data, soundManager) { var speed = 3; var d = 0.8; var controls = { moveUp: false, moveDown: false, moveLeft: false, moveRight: false, shotUp: false, shotDown: false, shotLeft: false, shotRight: false
}; var canonRadius = 20; var canonAngle = 0; var shotCounter = 0; var damageCounter = 0
var blinkCounter = 0; var maxX = 1200; this.id = data.id; this.hp = data.hp; this.score = data.score; this.state = "WAIT"; this.domElement = document; this.mesh = new THREE.Object3D(); this.mesh.visible = false; this.halfSize = 5; var core = new THREE.Object3D(); var color = new THREE.Color(); this.hue = data.color; color.setHSL(this.hue, 1.0, 0.5); for (var i = 0; i < 8; i++) { var ix = i & 1; var iy = (i >> 1) & 1; var iz = (i >> 2) & 1; var g = new THREE.BoxGeometry(4, 4, 4); var m = new THREE.MeshLambertMaterial({color : color}); var box = new THREE.Mesh(g, m); box.position.set(3 - 6 * ix, 3 - 6 * iy, 3 - 6 * iz); core.add(box);}
this.mesh.add(core); var g = new THREE.SphereGeometry(3, 4, 4); var m = new THREE.MeshLambertMaterial({color: color}); var canon = new THREE.Mesh(g, m); canon.position.set(canonRadius, 0, 0); this.mesh.add(canon); this.mesh.position.set(data.x, data.y, 0); camera.position.x = data.x; camera.position.y = data.y; this.bullets = []; this.bulletsData = []; scene.add(this.mesh); function Bullet(x, y, angle, hue) { this.speedX = 6 * Math.cos(angle); this.speedY = 6 * Math.sin(angle); this.counter = 0; this.type = "y"; this.halfSize = 4; this.tsubame = new THREE.Object3D(); this.mesh = new THREE.Object3D(); var dateNow = Date.now().toString(); this.id = (dateNow.substring(dateNow.length - 7) + (Math.random() * 100)) | 0; var color = new THREE.Color(); color.setHSL(hue, 0.6, 0.5); var g = new THREE.BoxGeometry(4, 8, 0.5); var m = new THREE.MeshLambertMaterial({color : color}); var plate = new THREE.Mesh(g, m); var wing = new THREE.Object3D(); wing.add(plate); plate = plate.clone(); plate.position.z = 2; plate.position.y = -3; wing.add(plate); plate = plate.clone(); plate.position.z = -2; plate.position.y = 3; wing.add(plate); wing.position.z = 3; wing.position.y = -1; this.tsubame.add(wing); wing = wing.clone(); wing.position.z = -3; wing.rotation.y = Math.PI; this.tsubame.add(wing); this.mesh.add(this.tsubame); this.mesh.position.set(x, y, 0); this.mesh.rotation.z = angle - Math.PI / 2;}
Bullet.prototype.getData = function() { return { id : this.id, x : this.mesh.position.x, y : this.mesh.position.y, angle : this.mesh.rotation.z
};}; this.update = function() { $("#gameScore").html(this.score); $("#gameHp").html(this.hp); if(this.state != "WAIT") { this.mesh.visible = true; if(this.state == "DAMAGE") { if(blinkCounter <= 3) { this.mesh.visible = false;} else if(blinkCounter > 7) { blinkCounter = 0;}
damageCounter++; blinkCounter++; if(damageCounter > 120) { damageCounter = 0; this.state = "NORMAL";}
}
if(controls.moveLeft) this.mesh.position.x -= speed; if(controls.moveUp) this.mesh.position.y += speed; if(controls.moveRight) this.mesh.position.x += speed; if(controls.moveDown) this.mesh.position.y -= speed; if(this.mesh.position.x > maxX) this.mesh.position.x = maxX; if(this.mesh.position.x < -maxX) this.mesh.position.x = -maxX; if(this.mesh.position.y > maxX) this.mesh.position.y = maxX; if(this.mesh.position.y < -maxX) this.mesh.position.y = -maxX; core.rotation.x += 0.05; core.rotation.y += 0.05; var targetPositionX = camera.position.x * d + this.mesh.position.x * (1 - d); var targetPositionY = camera.position.y * d + this.mesh.position.y * (1 - d); camera.position.x = targetPositionX; camera.position.y = targetPositionY; camera.lookAt(new THREE.Vector3(targetPositionX, targetPositionY, 0)); shotCounter++; if(controls.shotLeft | controls.shotUp | controls.shotRight | controls.shotDown) { var targetAngle = Math.atan2(controls.shotUp - controls.shotDown, controls.shotRight - controls.shotLeft); var halfPI = Math.PI / 2; if(canonAngle >= halfPI && targetAngle <= -halfPI) { canonAngle = canonAngle * d + (targetAngle + Math.PI * 2) * (1 - d);} else { canonAngle = canonAngle * d + targetAngle * (1 - d);}
canon.position.set(canonRadius * Math.cos(canonAngle), canonRadius * Math.sin(canonAngle), 0); if(shotCounter > 10) { var bullet = new Bullet(this.mesh.position.x, this.mesh.position.y, canonAngle, this.hue); this.bullets.push(bullet); scene.add(bullet.mesh); soundManager.seShot(); shotCounter = 0;}
}
}
var bulletsData = []; var removeBullets = []; this.bullets.forEach(function(b) { b.tsubame.rotation.y += 0.3; b.mesh.position.x += b.speedX; b.mesh.position.y += b.speedY; b.counter++; bulletsData.push(b.getData()); if(b.counter > 40 || !b.mesh.visible) { removeBullets.push(b);}
}); this.bulletsData = bulletsData; for (var i = 0; i < removeBullets.length; i++) { scene.remove(removeBullets[i].mesh); this.bullets.splice(this.bullets.indexOf(removeBullets[i]), 1);}
}; this.domElement.addEventListener('keydown', onKeyDown, false); this.domElement.addEventListener('keyup', onKeyUp, false); function onKeyDown(e) { switch(e.keyCode) { case 37:
e.preventDefault(); controls.shotLeft = true; break; case 38:
e.preventDefault(); controls.shotUp = true; break; case 39:
e.preventDefault(); controls.shotRight = true; break; case 40:
e.preventDefault(); controls.shotDown = true; break; case 65:
e.preventDefault(); controls.moveLeft = true; break; case 87:
e.preventDefault(); controls.moveUp = true; break; case 68:
e.preventDefault(); controls.moveRight = true; break; case 83:
e.preventDefault(); controls.moveDown = true; break;}
}
function onKeyUp(e) { switch(event.keyCode){ case 37:
e.preventDefault(); controls.shotLeft = false; break; case 38:
e.preventDefault(); controls.shotUp = false; break; case 39:
e.preventDefault(); controls.shotRight = false; break; case 40:
e.preventDefault(); controls.shotDown = false; break; case 65:
e.preventDefault(); controls.moveLeft = false; break; case 87:
e.preventDefault(); controls.moveUp = false; break; case 68:
e.preventDefault(); controls.moveRight = false; break; case 83:
e.preventDefault(); controls.moveDown = false; break;}
}
}; var AvatarManager = function(scene, player) { var avatarsArray = []; var Avatar = function(data) { this.id = data.id; this.state = data.state; this.mesh = new THREE.Object3D(); this.mesh.position.set(data.x, data.y, 0); this.bullets = []; var core = new THREE.Object3D(); var color = new THREE.Color(); this.hue = data.color; color.setHSL(this.hue, 1.0, 0.5); for (var i = 0; i < 8; i++) { var ix = i & 1; var iy = (i >> 1) & 1; var iz = (i >> 2) & 1; var g = new THREE.BoxGeometry(4, 4, 4); var m = new THREE.MeshLambertMaterial({color : color}); var box = new THREE.Mesh(g, m); box.position.set(3 - 6 * ix, 3 - 6 * iy, 3 - 6 * iz); core.add(box);}
this.mesh.add(core);}; Avatar.prototype.bulletsUpdate = function(bullets) { var bulletsLength = bullets.length; if(bulletsLength == 0) { if(this.bullets.length > 0) { for (var i = 0; i < this.bullets.length; i++) { scene.remove(this.bullets[i].mesh);}
this.bullets = [];}
} else { if(this.bullets.length > 0) { for (var i = 0; i < this.bullets.length; i++) { var isFinded = false; for (var j = 0; j < bulletsLength; j++) { if(this.bullets[i].id == bullets[j].id) { isFinded = true; break;}
}
if(!isFinded) { scene.remove(this.bullets[i].mesh); this.bullets.splice(i, 1); break;}
}
}
for (var i = 0; i < bulletsLength; i++) { var isFinded = false; for (var j = 0; j < this.bullets.length; j++) { if(this.bullets[j].id == bullets[i].id) { this.bullets[j].mesh.position.x = bullets[i].x; this.bullets[j].mesh.position.y = bullets[i].y; isFinded = true; break;}
}
if(!isFinded) { this.bullets.push(new Bullet(bullets[i], this.hue));}
}
}
}; function Bullet(data, hue) { this.id = data.id; this.tsubame = new THREE.Object3D(); this.mesh = new THREE.Object3D(); var color = new THREE.Color(); color.setHSL(hue, 0.6, 0.5); var g = new THREE.BoxGeometry(4, 8, 0.5); var m = new THREE.MeshLambertMaterial({color : color}); var plate = new THREE.Mesh(g, m); var wing = new THREE.Object3D(); wing.add(plate); plate = plate.clone(); plate.position.z = 2; plate.position.y = -3; wing.add(plate); plate = plate.clone(); plate.position.z = -2; plate.position.y = 3; wing.add(plate); wing.position.z = 3; wing.position.y = -1; this.tsubame.add(wing); wing = wing.clone(); wing.position.z = -3; wing.rotation.y = Math.PI; this.tsubame.add(wing); this.mesh.add(this.tsubame); this.mesh.position.set(data.x, data.y, 0); this.mesh.rotation.z = data.angle; scene.add(this.mesh);}
this.animate = function() { avatarsArray.forEach(function(avatar) { if(avatar.state == "WAIT") { avatar.mesh.visible = false;} else { avatar.mesh.visible = true; avatar.mesh.rotation.x += 0.05; avatar.mesh.rotation.y += 0.05; var length = avatar.bullets.length; if(length > 0) { for (var i = 0; i < length; i++) { avatar.bullets[i].tsubame.rotation.y += 0.3;}
}
}
});}; this.update = function(allPlayers) { var removeAvatarsID = []; avatarsArray.forEach(function(avatar) { var flag = true; for (var i = 0; i < allPlayers.length; i++) { if(allPlayers[i].id == avatar.id) { flag = false; break;}
}; if(flag) { removeAvatarsID.push(avatar.id);}
}); removeAvatarsID.forEach(function(rmAvatarID) { for (var i = 0; i < avatarsArray.length; i++) { if(avatarsArray[i].id == rmAvatarID) { scene.remove(avatarsArray[i].mesh); if(avatarsArray[i].bullets.length) { for (var j = 0; j < avatarsArray[i].bullets.length; i++) { scene.remove(avatarsArray[i].bullets[j].mesh);}
}
avatarsArray.splice(i, 1); break;}
};}); allPlayers.forEach(function(p) { if(player.id != p.id) { var isFinded = false; avatarsArray.forEach(function(avatar) { if(avatar.id == p.id) { avatar.state = p.state; avatar.mesh.position.set(p.x, p.y, 0); avatar.bulletsUpdate(p.bullets); isFinded = true;};}); if(!isFinded) { var a = new Avatar(p); avatarsArray.push(a); scene.add(a.mesh);}
}
});};}; var EnemyManager = function(scene, player, atkEnemys, soundManager) { var enemysArray = []; var Enemy = function(data) { this.id = data.id; this.hp = data.hp; this.atk = data.atk; this.mesh = new THREE.Object3D(); this.mesh.position.set(data.x, data.y, 0); this.halfSize = 0; this.counter = data.counter; this.blinkCounter = 0; switch(data.type) { case "akatan":
this.halfSize = 12; var g = new THREE.BoxGeometry(6, 10, 1); var m = new THREE.MeshLambertMaterial({color : 0xff1111}); var box = new THREE.Mesh(g, m); box.position.y = 9; this.mesh.add(box); box = new THREE.Mesh(g, m); box.position.x = -9; box.rotation.z = Math.PI / 2; this.mesh.add(box); box = new THREE.Mesh(g, m); box.position.x = 9; box.rotation.z = Math.PI / 2; this.mesh.add(box); box = new THREE.Mesh(g, m); box.position.y = -9; this.mesh.add(box); this.animate = function() { this.mesh.rotation.z -= 0.05;}; break; case "aotan":
this.halfSize = 12; var g = new THREE.BoxGeometry(6, 10, 2); var m = new THREE.MeshLambertMaterial({color : 0x5522ff}); var box = new THREE.Mesh(g, m); box.position.y = 9; this.mesh.add(box); box = new THREE.Mesh(g, m); box.position.x = -9; box.rotation.z = Math.PI / 2; this.mesh.add(box); box = new THREE.Mesh(g, m); box.position.x = 9; box.rotation.z = Math.PI / 2; this.mesh.add(box); box = new THREE.Mesh(g, m); box.position.y = -9; this.mesh.add(box); this.animate = function() { this.mesh.rotation.z += 0.05;}; break; case "syobu":
this.halfSize = 7; var g = new THREE.OctahedronGeometry(15); var m = new THREE.MeshLambertMaterial({color : 0xff00ff}); this.mesh.add(new THREE.Mesh(g, m)); this.animate = function() { this.mesh.rotation.x += 0.05; this.mesh.rotation.y += 0.05;}; break;}
}
this.localUpdate = function() { enemysArray.forEach(function(enemy) { enemy.animate(); enemy.mesh.visible = true; if(enemy.counter < 60) { if(enemy.blinkCounter <= 3) { enemy.mesh.visible = false;} else if(enemy.blinkCounter > 7) { enemy.blinkCounter = 0;}
enemy.blinkCounter++;}
}); atkEnemys.length = 0; player.bullets.forEach(function(bullet) { if(bullet.mesh.visible) { var bulletHitBox = new THREE.Box2(new THREE.Vector2(bullet.mesh.position.x - bullet.halfSize, bullet.mesh.position.y - bullet.halfSize), new THREE.Vector2(bullet.mesh.position.x + bullet.halfSize, bullet.mesh.position.y + bullet.halfSize)); enemysArray.forEach(function(enemy) { if(enemy.counter > 60) { var enemyHitBox = new THREE.Box2(new THREE.Vector2(enemy.mesh.position.x - enemy.halfSize, enemy.mesh.position.y - enemy.halfSize), new THREE.Vector2(enemy.mesh.position.x + enemy.halfSize, enemy.mesh.position.y + enemy.halfSize)); if(bulletHitBox.isIntersectionBox(enemyHitBox)) { atkEnemys.push({ id : enemy.id, bt : bullet.type }); bullet.mesh.visible = false; soundManager.seHit();}
}
});}
}); if(player.state == "NORMAL") { var playerHitBox = new THREE.Box2(new THREE.Vector2(player.mesh.position.x - player.halfSize, player.mesh.position.y - player.halfSize), new THREE.Vector2(player.mesh.position.x + player.halfSize, player.mesh.position.y + player.halfSize)); enemysArray.forEach(function(enemy) { if(enemy.counter > 60) { var enemyHitBox = new THREE.Box2(new THREE.Vector2(enemy.mesh.position.x - enemy.halfSize, enemy.mesh.position.y - enemy.halfSize), new THREE.Vector2(enemy.mesh.position.x + enemy.halfSize, enemy.mesh.position.y + enemy.halfSize)); if(playerHitBox.isIntersectionBox(enemyHitBox)) { player.state = "DAMAGE"; player.hp -= enemy.atk;}
}
});}
}; this.update = function(allEnemys) { var removeEnemysID = []; enemysArray.forEach(function(enemy) { var flag = true; for (var i = 0; i < allEnemys.length; i++) { if(allEnemys[i].id == enemy.id) { flag = false; break;}
}; if(flag) { removeEnemysID.push(enemy.id);}
}); removeEnemysID.forEach(function(rmEnemyID) { for (var i = 0; i < enemysArray.length; i++) { if(enemysArray[i].id == rmEnemyID) { scene.remove(enemysArray[i].mesh); enemysArray.splice(i, 1); break;}
};}); allEnemys.forEach(function(ae) { var isFinded = false; enemysArray.forEach(function(enemy) { if(enemy.id == ae.id) { enemy.mesh.position.set(ae.x, ae.y, 0); enemy.counter = ae.counter; isFinded = true;};}); if(!isFinded) { var newEnemy = new Enemy(ae); enemysArray.push(newEnemy); scene.add(newEnemy.mesh); soundManager.seEnemyBorn();}
});};}; var ItemManager = function(scene, player, getItems) { var itemsArray = []; var Item = function(data) { this.id = data.id; this.mesh = new THREE.Object3D(); this.mesh.position.set(data.x, data.y, 0); this.halfSize = 0; switch(data.type) { case "exp":
this.halfSize = 6; for (var i = 0; i < 8; i++) { var ix = i & 1; var iy = (i >> 1) & 1; var iz = (i >> 2) & 1; var g = new THREE.BoxGeometry(3, 3, 3); var m = new THREE.MeshLambertMaterial({color : 0xeeeeee}); var box = new THREE.Mesh(g, m); box.position.set(2 - 4 * ix, 2 - 4 * iy, 2 - 4 * iz); this.mesh.add(box);}
this.animate = function() { this.mesh.rotation.x += 0.05; this.mesh.rotation.y += 0.05;}; break;}
}
this.localUpdate = function() { itemsArray.forEach(function(item) { item.animate();}); var playerHitBox = new THREE.Box2(new THREE.Vector2(player.mesh.position.x - player.halfSize, player.mesh.position.y - player.halfSize), new THREE.Vector2(player.mesh.position.x + player.halfSize, player.mesh.position.y + player.halfSize)); itemsArray.forEach(function(item) { var itemHitBox = new THREE.Box2(new THREE.Vector2(item.mesh.position.x - item.halfSize, item.mesh.position.y - item.halfSize), new THREE.Vector2(item.mesh.position.x + item.halfSize, item.mesh.position.y + item.halfSize)); if(playerHitBox.isIntersectionBox(itemHitBox)) { getItems.push({ id : item.id });}
});}; this.update = function(allItems) { var removeItemsID = []; itemsArray.forEach(function(item) { var flag = true; for (var i = 0; i < allItems.length; i++) { if(allItems[i].id == item.id) { flag = false; break;}
}; if(flag) { removeItemsID.push(item.id);}
}); removeItemsID.forEach(function(rmItemID) { for (var i = 0; i < itemsArray.length; i++) { if(itemsArray[i].id == rmItemID) { scene.remove(itemsArray[i].mesh); itemsArray.splice(i, 1); break;}
};}); allItems.forEach(function(ai) { var isFinded = false; itemsArray.forEach(function(item) { if(item.id == ai.id) { item.mesh.position.set(ai.x, ai.y, 0); isFinded = true;};}); if(!isFinded) { var newItem = new Item(ai); itemsArray.push(newItem); scene.add(newItem.mesh);}
});};}; var SoundManager = function(volume) { var myVolume = volume; var bgm = new Audio("resources/Cyber_World.mp3"); bgm.loop = true; bgm.volume = myVolume; bgm.play(); this.seShot = function() { playSE(seShot);}; this.seHit = function() { playSE(seHit);}; this.seEnemyBorn = function() { playSE(seEnemyBorn);}; this.changeVolume = function(volume) { myVolume = volume; bgm.volume = volume;}; function playSE(seData) { if(myVolume > 0) { var sound = new Audio(seData); sound.volume = myVolume; sound.play();}
};}; $(document).ready(function() { var WIDTH = window.innerWidth; var HEIGHT = window.innerHeight; var socket, localData; var scene, camera, renderer, background, player, avatarManager, enemyManager, itemManager, soundManager; var gameDomElement = document.getElementById("game"); var bgColor = 0x333333; var GAME = {}; GAME.utils = {}; GAME.utils.state = { LOAD : 1, TITLE : 2, PLAY : 3, GAMEOVER : 4
}; GAME.state = GAME.utils.state.LOAD; GAME.volume = 0; socket = io.connect(); socket.on("first_message", function(data) { console.log(data); scene = new THREE.Scene(); camera = new THREE.PerspectiveCamera(45, WIDTH / HEIGHT, 1, 1500); camera.position.set(0, 0, 500); camera.lookAt(new THREE.Vector3(0, 0, 0)); scene.fog = new THREE.Fog(bgColor, 1250, 1500); renderer = new THREE.WebGLRenderer(); renderer.setSize(WIDTH, HEIGHT); renderer.setClearColor(bgColor, 1); gameDomElement.appendChild(renderer.domElement); var light = new THREE.DirectionalLight(0xffffff, 0.95); light.position.set(0, 0, 1000); scene.add(light); background = new Background(); scene.add(background.mesh); localData = {}; localData.player = {}; localData.atkEnemys = []; localData.getItems = []; soundManager = new SoundManager(GAME.volume); player = new Player(scene, camera, data.player, soundManager); avatarManager = new AvatarManager(scene, player); avatarManager.update(data.players); enemyManager = new EnemyManager(scene, player, localData.atkEnemys, soundManager); enemyManager.update(data.enemys); itemManager = new ItemManager(scene, player, localData.getItems); itemManager.update(data.items); window.addEventListener('resize', onWindowResize, false); window.addEventListener('keydown', onKeyDown, false); $('#gameVolume').click(onClickVolumeIcon); if(GAME.state == GAME.utils.state.LOAD) { gameDomElement.removeChild(document.getElementById("load_msg")); GAME.state = GAME.utils.state.TITLE;}
requestAnimationFrame(loop);}); socket.on('server_update', function(data) { if(GAME.state != GAME.utils.state.LOAD) { for (var i = 0; i < data.players.length; i++) { if(data.players[i].id == player.id) { player.score = data.players[i].score; break;}
}
avatarManager.update(data.players); enemyManager.update(data.enemys); itemManager.update(data.items);}
}); socket.json.on("dead_message", function(data) { player.mesh.visible = false; player.hp = data.hp; player.score = data.score; GAME.state = GAME.utils.state.GAMEOVER; $("#gameOver").removeClass("gameUIHidden");}); function loop() { background.update(); player.update(); avatarManager.animate(); enemyManager.localUpdate(); itemManager.localUpdate(); var bullets = []; player.bullets.forEach(function(b) { bullets.push(b.getData());}); localData.player = { id : player.id, x : player.mesh.position.x, y : player.mesh.position.y, hp : player.hp, state : player.state, bullets : player.bulletsData
}; if(player.state != "WAIT") { socket.json.emit("player_data", localData); if(player.hp <= 0) { player.state = "WAIT";}
}
renderer.render(scene, camera); requestAnimationFrame(loop);}
function onWindowResize(e) { WIDTH = window.innerWidth; HEIGHT = window.innerHeight; renderer.setSize(WIDTH, HEIGHT); camera.aspect = WIDTH / HEIGHT; camera.updateProjectionMatrix();}
function onKeyDown(e) { if(e.keyCode == 13) { if(GAME.state == GAME.utils.state.TITLE) { GAME.state = GAME.utils.state.PLAY; $("#gameTitle").addClass("gameUIHidden"); player.state = "NORMAL";} else if(GAME.state == GAME.utils.state.GAMEOVER) { GAME.state = GAME.utils.state.TITLE; $("#gameOver").addClass("gameUIHidden"); $("#gameTitle").removeClass("gameUIHidden");}
}
}
function onClickVolumeIcon() { if(GAME.volume <= 0) { GAME.volume = 0.5; $('#gameVolume i').removeClass("fa-volume-off"); $('#gameVolume i').addClass("fa-volume-down");} else if (GAME.volume < 1.0) { GAME.volume = 1.0; $('#gameVolume i').removeClass("fa-volume-down"); $('#gameVolume i').addClass("fa-volume-up");} else if (GAME.volume >= 1.0) { GAME.volume = 0; $('#gameVolume i').removeClass("fa-volume-up"); $('#gameVolume i').addClass("fa-volume-off");}
soundManager.changeVolume(GAME.volume);};}); 